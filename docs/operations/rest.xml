<?xml version='1.0' encoding='UTF-8' ?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<section xmlns="http://docbook.org/ns/docbook" xml:id="operations.observability.rest" version="5">
  <title>REST-accessible Observability Endpoints</title>
  <para>Various components in the libmtev namespace can register REST endpoints
  via the <code>http_rest.h</code> APIs and expose a wealth of configuration
  and run-time mechanics to the caller.</para>

  <example>
  <title>This libmtev configuration enables a REST listener on port 8888</title>
  <programlisting><![CDATA[
  <root>
  <listeners>
    <listener type="http_rest_api" address="*" port="8888" ssl="off">
      <config>
        <document_root>/path/to/docroot</document_root>
      </config>
    </listener>
  </listeners>
  <rest>
    <acl>
      <!-- you should consider tighter ACLs -->
      <rule type="allow" />
    </acl>
  </rest>
  </root>
  ]]></programlisting>
  </example>

  <para>In addition to a confgiuration snippet similar to the above, you must
  programmatically initialize the HTTP REST system via a call to <code>mtev_http_rest_init()</code>.</para>

  <para>The REST listener is implemented on a non-compliant HTTP listener by
  subverting the four-byte control words "DELE", "MERG", "GET ", "HEAD",
  "POST", "PUT " and dropping them into a compliant HTTP state machine.  While
  the session intiiation is not strictly compliant with the HTTP specification
  it happily serves all known browsers and plays nicely with HTTP proxies as
  well.</para>

  <para>If the listener "type" is <code>http_rest_api</code>, then only
  the REST handler is served on that listening socket.  If the more general
  type of <code>control_dispatch</code> is used, then a full control channel
  is served and the REST services are superimposed on that.  Listeners
  of type <code>control_dispatch</code> are even less HTTP compliant, but
  still serve all web browers and proxies correctly.</para>

  <section xml:id="operations.observability.rest.capabilities">
    <title>The capabilities endpoints</title>
    <para>It is highly recommended that you expose the libmtev capabilities
    endpoints.  This service exposes information about the libmtev version
    and build as well as any dispatch handlers that have been registered
    via <code>mtev_control_dispatch_delegate(...)</code>.</para>

    <section><title>CAPA</title>
    <para>Issuing a non-compliant "CAPA" command to the listener will return
    XML document of capabilities.</para>
    <example><title>CAPA XML output</title>
    <screen>
<prompt>#</prompt> <userinput>curl http://127.0.0.1:8888/capa</userinput>
<computeroutput><![CDATA[
<?xml version="1.0" encoding="utf8"?>
<mtev_capabilities>
  <version>master.5553ef6a1c838ac5a639a634027db7b2c39be23d.1459876317</version>
  <unameBuild bitwidth="64">
    <sysname>Darwin</sysname>
    <nodename>cudgel</nodename>
    <release>15.3.0</release>
    <version>Darwin Kernel Version 15.3.0; root:xnu-3248.30.4~1/RELEASE_X86_64</version>
    <machine>x86_64</machine>
  </unameBuild>
  <unameRun bitwidth="64">
    <sysname>Darwin</sysname>
    <nodename>cudgel</nodename>
    <release>15.4.0</release>
    <version>Darwin Kernel Version 15.4.0; root:xnu-3248.40.184~3/RELEASE_X86_64</version>
    <machine>x86_64</machine>
  </unameRun>
  <features/>
  <current_time>1460120546.029</current_time>
  <services>
    <service name="control_dispatch" connected="true">
      <command name="mtev_wire_rest_api" version="1.0" code="0x504f5354"/>
      <command name="mtev_wire_rest_api" version="1.0" code="0x4d455247"/>
      <command name="mtev_wire_rest_api" version="1.0" code="0x48454144"/>
      <command name="mtev_wire_rest_api" version="1.0" code="0x47455420"/>
      <command name="capabilities_transit" version="1.0" code="0x43415041"/>
      <command name="mtev_wire_rest_api" version="1.0" code="0x50555420"/>
      <command name="mtev_wire_rest_api" version="1.0" code="0x44454c45"/>
    </service>
  </services>
  <modules/>
</mtev_capabilities>
]]></computeroutput>
</screen>
    </example>
    </section>

    <section><title>GET /capa</title>
    <para>The HTTP GET request against /capa will return the same XML document
    as the CAPA command.</para>
    <example><screen><prompt>#</prompt> <userinput>curl -XCAPA http://127.0.0.1:8888/</userinput></screen></example>
    </section>
    
    <section><title>GET /capa.json</title>
    <para>An alternative endpoint providing JSON encoded capabilities output.</para>
    <example><title>JSON output from /capa.json</title>
<screen><prompt>#</prompt> <userinput>curl http://127.0.0.1:8888/capa.json</userinput>
<computeroutput><![CDATA[
{
  "version": "master.5553ef6a1c838ac5a639a634027db7b2c39be23d.1459876317",
  "unameBuild": {
    "bitwidth": 64,
    "sysname": "Darwin",
    "nodename": "cudgel",
    "release": "15.3.0",
    "version": "Darwin Kernel Version 15.3.0; root:xnu-3248.30.4~1/RELEASE_X86_64",
    "machine": "x86_64"
  },
  "unameRun": {
    "bitwidth": 64,
    "sysname": "Darwin",
    "nodename": "cudgel",
    "release": "15.4.0",
    "version": "Darwin Kernel Version 15.4.0; root:xnu-3248.40.184~3/RELEASE_X86_64",
    "machine": "x86_64"
  },
  "features": {},
  "current_time": "1460121207543",
  "services": {
    "0x10e19480": {
      "control_dispatch": "control_dispatch",
      "commands": {
        "0x504f5354": {
          "name": "mtev_wire_rest_api",
          "version": "1.0"
        },
        "0x4d455247": {
          "name": "mtev_wire_rest_api",
          "version": "1.0"
        },
        "0x48454144": {
          "name": "mtev_wire_rest_api",
          "version": "1.0"
        },
        "0x47455420": {
          "name": "mtev_wire_rest_api",
          "version": "1.0"
        },
        "0x43415041": {
          "name": "capabilities_transit",
          "version": "1.0"
        },
        "0x50555420": {
          "name": "mtev_wire_rest_api",
          "version": "1.0"
        },
        "0x44454c45": {
          "name": "mtev_wire_rest_api",
          "version": "1.0"
        }
      }
    }
  },
  "modules": {}
}
]]></computeroutput>
</screen>
    </example>
    </section>
  </section>
  <section xml:id="operations.observability.rest.events">
    <title>The eventer system</title>
  After the eventer and http_rest subsystems are initialized, one can register the events REST endpoint registration via a call to <code>mtev_events_rest_init()</code>.

  This exposes three four endpoints that help observe the running systems.

  <section><title>GET /eventer/sockets.json</title>
    <para>This call exposes all the currently registered file descriptors in
    the eventer system and their state.</para>
    <section><title>Querystring parameters</title>
      <para>None.</para>
    </section>
  </section>
  <section><title>GET /eventer/timers.json</title>
    <para>This call exposes all the currently registered timed events in
    the eventer system and their state.</para>
    <section><title>Querystring parameters</title>
      <para>None.</para>
    </section>
  </section>
  <section><title>GET /eventer/jobq.json</title>
    <para>This call exposes all the job queues in the eventer system, their
    backlog information and exponentially weighted averages of the wait and
    service times of events processed on those queues.</para>
    <section><title>Querystring parameters</title>
      <para>None.</para>
    </section>
  </section>
  <section><title>GET /eventer/logs/&lt;name&gt;.json</title>
    <para>This exposes lines logged to log named <code>&lt;name&gt;</code> (commonly "internal") of <code>type="memory"</code>. Log lines are indexed in the return set.</para>
    <section><title>Querystring parameters</title>
      <para><variablelist>
        <varlistentry>
          <term>last=N</term>
          <listitem>
            <para>specifies to return only N most-recent log lines.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>since=I</term>
          <listitem>
            <para>specifies to return only log lines after index I.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>
    </section>
  </section>
  </section>
</section>
